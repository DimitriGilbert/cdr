#!/bin/bash
# @parseArger-begin
# @parseArger-help "cdr record command" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers --parse
# @parseArger-declarations
# @parseArger pos what "what to record (eg: pain, nausea,med intakes ...)"
# @parseArger opt loc "where is it ?" --short l --repeat --alias localisation --alias localization --alias location --alias where
# @parseArger opt intensity "record intensity/level from 1 to 10" --short i --alias level
# @parseArger opt more-context "more information" --short c --alias info --alias information --alias description
# @parseArger opt date "when did it happen ?" --short d --alias when
# @parseArger opt config "parent config folder, user .config by default"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_what="";
# OPTIONALS ARGUMENTS
_arg_loc=()
_arg_intensity=
_arg_more_context=
_arg_date=
_arg_config=
# FLAGS
# LEFTOVERS
_arg_leftovers=()
# LEFTOVERS
	declare -A _arg_parsed_leftovers
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "cdr record command:"
	echo -e "	what: what to record (eg: pain, nausea,med intakes ...)"
	echo -e "	-l, --loc|--localisation|--localization|--location|--where <loc>: where is it ?, repeatable"
	echo -e "	-i, --intensity|--level <intensity>: record intensity/level from 1 to 10"
	echo -e "	-c, --more-context|--info|--information|--description <more-context>: more information"
	echo -e "	-d, --date|--when <date>: when did it happen ?"
	echo -e "	--config <config>: parent config folder, user .config by default"
	echo -e "Usage :
	$0 <what> [--loc <value>] [--intensity <value>] [--more-context <value>] [--date <value>] [--config <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-l|--where|--location|--localization|--localisation|--loc)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_loc+=("$2")
				shift
				;;
			--loc=*)
				_arg_loc+=("${_key##--loc=}")
				;;
			--localisation=*)
				_arg_loc+=("${_key##--localisation=}")
				;;
			--localization=*)
				_arg_loc+=("${_key##--localization=}")
				;;
			--location=*)
				_arg_loc+=("${_key##--location=}")
				;;
			--where=*)
				_arg_loc+=("${_key##--where=}")
				;;
			-l*)
				_arg_loc+=("${_key##-l}")
				;;
			
			-i|--level|--intensity)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_intensity="$2"
				shift
				;;
			--intensity=*)
				_arg_intensity="${_key##--intensity=}"
				;;
			--level=*)
				_arg_intensity="${_key##--level=}"
				;;
			-i*)
				_arg_intensity="${_key##-i}"
				;;
			
			-c|--description|--information|--info|--more-context)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_more_context="$2"
				shift
				;;
			--more-context=*)
				_arg_more_context="${_key##--more-context=}"
				;;
			--info=*)
				_arg_more_context="${_key##--info=}"
				;;
			--information=*)
				_arg_more_context="${_key##--information=}"
				;;
			--description=*)
				_arg_more_context="${_key##--description=}"
				;;
			-c*)
				_arg_more_context="${_key##-c}"
				;;
			
			-d|--when|--date)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_date="$2"
				shift
				;;
			--date=*)
				_arg_date="${_key##--date=}"
				;;
			--when=*)
				_arg_date="${_key##--when=}"
				;;
			-d*)
				_arg_date="${_key##-d}"
				;;
			
			--config)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				# parsing leftovers
				--*)
					if [[ "$2" =~ ^--([^=]+)(=(.*))?$ ]] || [ "$2" = "" ]; then
						_arg_parsed_leftovers["${1#--}"]="on"
					elif [[ "$1" =~ ^--([^=]+)=(.*)$ ]]; then
						_arg_parsed_leftovers["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}";
					else
						_arg_parsed_leftovers["${1#--}"]="${2}";
						shift;
					fi
					;;

				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="what"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_what ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\twhat: ${_arg_what}";
	echo -e "\tloc: ${_arg_loc[*]}";
	echo -e "\tintensity: ${_arg_intensity}";
	echo -e "\tmore-context: ${_arg_more_context}";
	echo -e "\tdate: ${_arg_date}";
	echo -e "\tconfig: ${_arg_config}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ "$_arg_config" == "" ]; then
	_arg_config="$HOME/.config";
fi

_CDR_CDIR="$_arg_config/CDR";
_CDR_RDIR="$_CDR_CDIR/records";


if [ "$_arg_date" == "" ]; then
	_arg_date="$(date +%Y-%m-%d:%H:%M:%S)";
	_file_date="$(date +%Y-%m-%d)";
else
	_file_date="$(date +%Y-%m-%d -d "$_arg_date")";
	_arg_date="$(date +%Y-%m-%d:%H:%M:%S -d "$_arg_date")";
fi

_CDR_DFILE="$_CDR_RDIR/$_file_date";

# TODO, specify new-day date
if [ ! -f "$_CDR_DFILE" ]; then
	inCmd=("$_SCRIPT_DIR/new-day");
	if [ "$_arg_config" != "" ]; then
		inCmd+=("--config" "$_arg_config");
	fi
	if [ "$_verbose_level" -ne "0" ]; then
		inCmd+=("--verbose" "$_verbose_level");
	fi
	"${inCmd[@]}";
fi

recordData='"what": "'$_arg_what'", "date": "'$_arg_date'"';

if [ "${#_arg_loc[@]}" -gt 0 ]; then
	recordData+=', "loc": [';
	for loc in "${_arg_loc[@]}"; do
		recordData+='"'$loc'",';
	done
	recordData="${recordData%?}";
	recordData+=']';
fi

if [ "$_arg_intensity" != "" ]; then
	recordData+=', "intensity": "'$_arg_intensity'"';
fi

if [ "$_arg_more_context" != "" ]; then
	recordData+=', "more_context": {"init":"'$_arg_more_context'"}';
fi

for xctx in "${!_arg_parsed_leftovers[@]}"; do
	recordData+=", \"$xctx\": \"${_arg_parsed_leftovers[$xctx]}\"";
done

yq eval ".records += [{${recordData}}]" -i "$_CDR_DFILE";
