#!/bin/bash
# @parseArger-begin
# @parseArger-help "Archive" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger opt config "parent config folder, user .config by default"
# @parseArger opt path "output path"
# @parseArger opt file "file to add" --repeat
# @parseArger flag directory "add whole record directory"
# @parseArger flag override "override file if it exists"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
# OPTIONALS ARGUMENTS
_arg_config=
_arg_path=
_arg_file=()
# FLAGS
_arg_directory="off"
_arg_override="off"
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Archive:"
	echo -e "	--config <config>: parent config folder, user .config by default"
	echo -e "	--path <path>: output path"
	echo -e "	--file <file>: file to add, repeatable"
	echo -e "	--directory|--no-directory: add whole record directory"
	echo -e "	--override|--no-override: override file if it exists"
	echo -e "Usage :
	$0 [--config <value>] [--path <value>] [--file <value>] [--[no-]directory] [--[no-]override]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--config)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			
			--path)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_path="$2"
				shift
				;;
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			
			--file)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_file+=("$2")
				shift
				;;
			--file=*)
				_arg_file+=("${_key##--file=}")
				;;
			
			--directory)
				_arg_directory="on"
				;;
			--no-directory)
				_arg_directory="off"
				;;
			--override)
				_arg_override="on"
				;;
			--no-override)
				_arg_override="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	_leftovers_count=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "\tconfig: ${_arg_config}";
	echo -e "\tpath: ${_arg_path}";
	echo -e "\tfile: ${_arg_file[*]}";
	echo -e "\tdirectory: ${_arg_directory}";
	echo -e "\toverride: ${_arg_override}";
	echo -e "\tleftovers: ${_arg_leftovers[*]}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

if [ "$_arg_config" == "" ]; then
	_arg_config="$HOME/.config";
fi

_CDR_CDIR="$_arg_config/CDR";
_CDR_RDIR="$_CDR_CDIR/records";

zipCmd=(zip -q "${_arg_leftovers[@]}" "${_arg_path}");

if [ "$_arg_directory" == "on" ]; then
	zipCmd+=(-ru "$_CDR_RDIR");
elif [ "${#_arg_file[@]}" -gt 0 ]; then
	for file in "${_arg_file[@]}"; do
		zipCmd+=("$_CDR_RDIR/$file");
	done
fi

if [ "$_arg_override" == "on" ] && [ -f "$_arg_path" ]; then
	rm -f "$_arg_path";
fi

log "Archiving to $_arg_path" 1;
"${zipCmd[@]}";
